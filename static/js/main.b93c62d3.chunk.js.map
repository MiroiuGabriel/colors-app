{"version":3,"sources":["components/functions/generateRandomColor.ts","components/ButtonSidebar.tsx","components/Card.tsx","components/Footer.tsx","components/Cards.tsx","components/ColorGame.tsx","App.tsx","index.tsx"],"names":["getRandomColor","color","i","Math","floor","random","ButtonSidebar","card","lockCard","removeCard","length","displayNotification","useEffect","navigator","permissions","query","name","allowWithoutGesture","hideDiv","clsx","isLocked","className","onClick","id","a","clipboard","writeText","Card","addColor","isLast","showLast","namedColor","namer","pick","addButtonClasses","style","backgroundColor","slice","pantone","Footer","shuffleAll","Cards","cards","divRef","useRef","current","focus","ref","tabIndex","onKeyPress","ev","code","map","index","initalCards","waitForShuffle","savedCards","JSON","parse","window","localStorage","getItem","ColorGame","useState","setCards","showNotification","setShowNotification","setItem","stringify","notification","setTimeout","filter","newCards","splice","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b93c62d3.chunk.js","sourcesContent":["export const getRandomColor = () => {\n\t// return '#' + '0123456789ABCDEF'.split('').sort(() => 0.5 - Math.random()).slice(0, 6).join('')\t// one liner\n\n\tconst colors = '0123456789ABCDEF';\n\tlet color: string = '';\n\tfor (let i = 0; i < 6; i++) {\n\t\tcolor += colors[Math.floor(Math.random() * 16)];\n\t}\n\treturn '#' + color;\n};\n","import { IoRemove as RemoveIcon } from 'react-icons/io5';\nimport { MdContentCopy as Copy } from 'react-icons/md';\nimport { AiFillLock as Locked } from 'react-icons/ai';\nimport { AiFillUnlock as Unlocked } from 'react-icons/ai';\nimport clsx from 'clsx';\nimport './css/buttonsidebar.css';\nimport { ButtonSideBarProps } from './Types/Types';\nimport { useEffect } from 'react';\n\nconst ButtonSidebar = ({ card, lockCard, removeCard, length, displayNotification }: ButtonSideBarProps) => {\n\tuseEffect(() => {\n\t\tconst queryOpts: any = { name: 'clipboard-write', allowWithoutGesture: false };\n\t\tnavigator.permissions.query(queryOpts);\n\t}, []);\n\n\tconst hideDiv = clsx('button tooltip mobile', length === 2 && 'hide-div');\n\tconst isLocked = clsx('button tooltip ', card.isLocked && 'highlight');\n\treturn (\n\t\t<div className=\"main-buttons-container\">\n\t\t\t<div className={hideDiv} onClick={() => removeCard(card.id)}>\n\t\t\t\t<RemoveIcon />\n\t\t\t\t<span className=\"tooltiptext\">Remove color</span>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"button tooltip\"\n\t\t\t\tonClick={async () => {\n\t\t\t\t\tif (navigator.clipboard) {\n\t\t\t\t\t\tawait navigator.clipboard.writeText(card.color);\n\t\t\t\t\t\tdisplayNotification();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Copy />\n\t\t\t\t<span className=\"tooltiptext\">Copy HEX</span>\n\t\t\t</div>\n\t\t\t<div className={isLocked} onClick={() => lockCard(card.id)}>\n\t\t\t\t{card.isLocked ? <Locked /> : <Unlocked />}\n\t\t\t\t<span className=\"tooltiptext\">Toggle lock</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ButtonSidebar;\n","import ButtonSidebar from './ButtonSidebar';\nimport namer from 'color-namer';\nimport clsx from 'clsx';\nimport { IoMdAdd as AddButton } from 'react-icons/io';\nimport { CardProps } from './Types/Types';\nimport './css/card.css';\n\nconst Card = ({ card, lockCard, removeCard, length, displayNotification, addColor, isLast }: CardProps) => {\n\tconst showLast = clsx('sidebar', card.isLocked && 'show-last');\n\tconst namedColor = namer(card.color, { pick: ['pantone'] });\n\tconst addButtonClasses = clsx('add-button-trigger', isLast && 'hide-div');\n\treturn (\n\t\t<div style={{ backgroundColor: card.color }} className=\"card-container\">\n\t\t\t<div className={showLast}>\n\t\t\t\t<ButtonSidebar\n\t\t\t\t\tcard={card}\n\t\t\t\t\tlockCard={lockCard}\n\t\t\t\t\tremoveCard={removeCard}\n\t\t\t\t\tlength={length}\n\t\t\t\t\tdisplayNotification={displayNotification}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<h1 className=\"hex\">{card.color.slice(1, card.color.length)}</h1>\n\t\t\t<h2 className=\"hex-name\">{namedColor.pantone[0].name}</h2>\n\t\t\t<div className={addButtonClasses}>\n\t\t\t\t{length < 7 && (\n\t\t\t\t\t<div className=\"add-button tooltip\" onClick={() => addColor(card.id)}>\n\t\t\t\t\t\t<AddButton />\n\t\t\t\t\t\t<span className=\"tooltiptext\">Add colors</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import './css/footer.css';\n\nconst Footer = ({ shuffleAll }: { shuffleAll: () => void }) => {\n\treturn (\n\t\t<div className=\"footer-container\">\n\t\t\t<button className=\"generator-button\" onClick={shuffleAll}>\n\t\t\t\tGenerate\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Footer;\n","import { useEffect, useRef } from 'react';\nimport Card from './Card';\nimport Footer from './Footer';\nimport { CardsProps } from './Types/Types';\nimport './css/cards.css';\n\nconst Cards = ({ cards, shuffleAll, lockCard, removeCard, displayNotification, addColor }: CardsProps) => {\n\tconst divRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tdivRef.current?.focus();\n\t}, []);\n\n\treturn (\n\t\t<div\n\t\t\tref={divRef}\n\t\t\ttabIndex={0}\n\t\t\tclassName=\"cards-container\"\n\t\t\tonKeyPress={ev => ev.code === 'Space' && shuffleAll()}\n\t\t>\n\t\t\t{cards.map((card, index) => (\n\t\t\t\t<Card\n\t\t\t\t\tkey={card.id}\n\t\t\t\t\tcard={card}\n\t\t\t\t\tlockCard={lockCard}\n\t\t\t\t\tremoveCard={removeCard}\n\t\t\t\t\tlength={cards.length}\n\t\t\t\t\tdisplayNotification={displayNotification}\n\t\t\t\t\taddColor={addColor}\n\t\t\t\t\tisLast={index === cards.length - 1}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<Footer shuffleAll={shuffleAll} />\n\t\t</div>\n\t);\n};\n\nexport default Cards;\n","import { useState, useEffect } from 'react';\nimport { getRandomColor } from './functions/generateRandomColor';\nimport Cards from './Cards';\nimport clsx from 'clsx';\nimport { CardType } from './Types/Types';\nimport './css/colorgame.css';\n\nconst initalCards: CardType[] = [\n\t{\n\t\tid: 1,\n\t\tcolor: getRandomColor(),\n\t\tisLocked: false,\n\t},\n\t{\n\t\tid: 2,\n\t\tcolor: getRandomColor(),\n\t\tisLocked: false,\n\t},\n\t{\n\t\tid: 3,\n\t\tcolor: getRandomColor(),\n\t\tisLocked: false,\n\t},\n\t{\n\t\tid: 4,\n\t\tcolor: getRandomColor(),\n\t\tisLocked: false,\n\t},\n];\n\nlet waitForShuffle = false;\nconst savedCards: CardType[] | null = JSON.parse(window.localStorage.getItem('Cards') || 'null');\n\nconst ColorGame = () => {\n\tconst [cards, setCards] = useState(savedCards || initalCards);\n\tconst [showNotification, setShowNotification] = useState(false);\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem('Cards', JSON.stringify(cards));\n\t}, [cards]);\n\n\tconst shuffleAll = () => {\n\t\tif (!waitForShuffle) {\n\t\t\tsetCards(\n\t\t\t\tcards.map(card => {\n\t\t\t\t\tif (card.isLocked) {\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t}\n\t\t\t\t\treturn { ...card, color: getRandomColor() };\n\t\t\t\t})\n\t\t\t);\n\t\t\twaitForShuffle = true;\n\t\t\tsetTimeout(() => (waitForShuffle = false), 100);\n\t\t}\n\t};\n\tconst lockCard = (id: number) => {\n\t\tsetCards(cards.map(card => (card.id === id ? { ...card, isLocked: !card.isLocked } : card)));\n\t};\n\tconst removeCard = (id: number) => {\n\t\tsetCards(cards.filter(card => card.id !== id));\n\t};\n\tconst displayNotification = () => {\n\t\tif (!showNotification) {\n\t\t\tsetShowNotification(true);\n\t\t\tsetTimeout(() => setShowNotification(false), 2000);\n\t\t}\n\t};\n\tconst addColor = (id: number) => {\n\t\tif (cards.length < 10) {\n\t\t\tlet newCards = [...cards];\n\t\t\tnewCards.splice(id, 0, { id: Math.floor(Math.random() * 1000), color: getRandomColor(), isLocked: false });\n\t\t\tsetCards(newCards);\n\t\t}\n\t};\n\tconst notification = clsx('notification', showNotification && 'show-notification');\n\treturn (\n\t\t<div className=\"color-game-container\">\n\t\t\t<Cards\n\t\t\t\tcards={cards}\n\t\t\t\tshuffleAll={shuffleAll}\n\t\t\t\tlockCard={lockCard}\n\t\t\t\tremoveCard={removeCard}\n\t\t\t\tdisplayNotification={displayNotification}\n\t\t\t\taddColor={addColor}\n\t\t\t/>\n\t\t\t<div className={notification}>Color copied to the clipboard</div>\n\t\t</div>\n\t);\n};\n\nexport default ColorGame;\n","import './components/ColorGame';\nimport './App.css';\nimport ColorGame from './components/ColorGame';\n\nconst App = () => {\n\treturn <ColorGame />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}